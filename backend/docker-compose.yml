services:
  web:
    image: web
    build:
      context: .
      dockerfile: src/AnimalAllies.Web/Dockerfile
    env_file:
      - src/AnimalAllies.Web/.env
    networks:
      - backend-network
    depends_on:
      redis:
        condition: service_started
      fileservice:
        condition: service_started
      notification-service:
        condition: service_started
      telegram-bot-service:
        condition: service_started
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ADMIN__USERNAME=admin
      - ADMIN__EMAIL=admin@gmail.com
      - ADMIN__PASSWORD=Admin123
    secrets:
      - nuget_username
      - nuget_password
    ports:
      - "8080:8080"
  
  cache-invalidator-service:
    image: cache-invalidator-service
    build:
      context: ../CacheInvalidatorService
      dockerfile: src/CacheInvalidatorService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - DOTNET_ENVIRONMENT=Docker
    networks:
      - backend-network
    
  outbox-orchestrator-service:
    image: outbox-orchestrator-service
    build:
      context: ../OutboxOrchestratorService
      dockerfile: src/OutboxOrchestratorService/Dockerfile
    environment:
      - DOTNET_ENVIRONMENT=Docker
    networks:
      - backend-network
      - bot-network
  
  telegram-bot-service:
    image: telegram-bot-service
    build:
      context: ../TelegramBotService
      dockerfile: src/TelegramBotService/Dockerfile
    env_file: 
      - ../TelegramBotService/src/TelegramBotService/.env
    networks:
      - backend-network
      - bot-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - BOT_TOKEN=${BOT_TOKEN}
    ports:
      - "4000:4000"
    secrets:
      - nuget_username
      - nuget_password
    depends_on:
      postgres:
        condition: service_healthy
  
  notification-service:
    image: notification-service
    build:
      context: ../NotificationService
      dockerfile: src/NotificationService/Dockerfile
    networks:
      - backend-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    ports:
      - "6000:6000"
    secrets:
      - nuget_username
      - nuget_password
    depends_on:
      postgres:
        condition: service_healthy
  
  fileservice:
    image: fileservice
    build:
      context: ../FileService
      dockerfile: src/FileService/Dockerfile
    networks:
      - fileservice-network
      - backend-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
  
  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:latest
    restart: always
    networks:
      - fileservice-network
      - backend-network
    environment:
      POSTGRES_DB: "animalAllies"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "345890"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U postgres -d animalAllies",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  
  seq:
    image: datalust/seq:latest
    container_name: seq
    restart: always
    networks:
      - backend-network
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5341:5341"
      - "8081:80"
  
  minio:
    container_name: minio
    image: minio/minio
    networks:
      - backend-network
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio-data:/data
    command: server --console-address ":9001" /data
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 3
  
  rabbitmq:
    image: rabbitmq:management-alpine
    container_name: rabbitmq
    hostname: rabbitmq
    networks:
      - backend-network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always
  
  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    networks:
      - backend-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongoadmin
      MONGO_INITDB_ROOT_PASSWORD: mongopassword
    ports:
      - "27017:27017"
  
  nginx:
    image: nginx:latest
    networks:
      - backend-network
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web
    restart: always
  
  redis:
    image: redis:7.2-alpine
    container_name: redis
    command: redis-server --requirepass 12345 --bind 0.0.0.0 --protected-mode yes
    environment:
      - REDIS_PASSWORD=12345
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend-network
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "12345", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 3
      
volumes:
  rabbitmq_data:
  postgres-data:
  minio-data:
  redis-data:

secrets:
  nuget_username:
    file: ./secrets/nuget_username.txt
  nuget_password:
    file: ./secrets/nuget_password.txt

networks:
  backend-network:
    driver: bridge
  fileservice-network:
    driver: bridge 
  bot-network:
    driver: bridge